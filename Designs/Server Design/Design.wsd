@startuml ClassDiagram
Title Class Diagram

' websocket code in github
Class Communication
{
    ' client class/struct maken?
    {field} - int: port
    {field} - IPAddress: myip
    {field} - IPAddress<vector>: clients
    {field} - char[1024]: buffer
    ' change char array to string?
    ' {method} + void SetPort(int port)
    {method} + int GetPort()
    ' {method} + void setIP(IPAdress IP)
    {method} + IPAdress GetmyIP()
    {method} + IPAddress<vector> GetClients()
    {method} + Communication(int port, IPAddress ip)
    {method} + void Listen(int port)
    {method} + void Send()
    {method} + void Broadcast()
    {method} + bool Connect()
    {method} + bool IsConnected()
    {method} + bool CloseConnection()
}

Class Database
{
    ' change txtFile
    {field} - txtFile: database
    {method} + Database()
    {method} + void Add()
    {method} + void Delete()
    {method} + object SearchID()
    {method} + object SearchName()
    ' {method} + void Searchtype()
}

' enum with types, or a simple string?
' struct instead of class?
Class Object
{
    {field} - string: name
    {field} - int: id
    ' {field} - string type
    {method} + void SetName(string name)
    {method} + string GetName()
    {method} + void SetId(int id)
    {method} + int GetPort()
    ' {method} + void SetType(string type)
    ' {method} + string GetType()
    -- functions & methods --
    {method} + Object(string name, int id)
    {method} + string ToString(Object Object)
}

Class ProtocolParserInterface
{
    {method} + string Prepare(string data)
    {method} + string Interpret(string data)
}

Class ProtocolParser
{
    {method} + ProtocolParser()
    {method} + string Prepare(string data)
    {method} + string Interpret(string data)
}

' simple terminal UI
Class UserInterface
{
    {method} + UserInterface(mutex mutex)
    {method} + void Terminal()
    {method} + string Read()
    {method} + void Write(string input)
}

Class Main
{
    {field} - mutex: mutex
    {field} - UserInterface: terminal
    {method} + void Main()
}

' note left of JsonBuilder : Implementatie wordt geleverd door de\nArduinoJson Library
' note top of JsonBuilder : Kijk naar gebruik van pointers

' EMPTY CLASSES
' Class CANBus
' END OF EMPYY CLASSES

Main -o UserInterface
Main o-- Object
Main -- Database
Main -- Communication
ProtocolParserInterface <|.. ProtocolParser
Communication -- ProtocolParserInterface
' IMasterSlave <|.. I2C
' IMasterSlave <|.. CANBus
' IDipSwitch <|.. DipSwitch

' Controller "1" o-- "1" WiFiHandler
' Controller "1" o-- "1" IMasterSlave
' Controller "1" o-- "1" JsonBuilder
' Controller "1" o-down- "1" IDipSwitch
' Controller "1" o-- "1" WebSocketHandler

' WiFiHandler "1" o-- "1" WiFiData
' WebSocketHandler "1" o-- "1" WebsocketData

' See if we should separate WebSocket & WiFi
' object opslaan als JSON objecten?
@enduml